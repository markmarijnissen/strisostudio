
/*
Code generated with Faust version 2.40.12
Compilation options: -lang wasm-ib -cn synth -es 1 -mcd 16 -single -ftz 2 
*/

function getJSONsynth() {
	return '{"name": "synth","filename": "synth.dsp","version": "2.40.12","compile_options": "-lang wasm-ib -cn synth -es 1 -mcd 16 -single -ftz 2","include_pathnames": ["/usr/local/share/faust","/usr/local/share/faust","/usr/share/faust",".","/tmp/sessions/F9CD4BBD8AE717E26F6FE568ABFA7CC508B3FFD6/web/wasmjs-worklet"],"size": 17424,"inputs": 0,"outputs": 1,"meta": [ { "compilation_options": "-single -scal -I libraries/ -I project/ -lang wasm" },{ "compile_options": "-lang wasm-ib -cn synth -es 1 -mcd 16 -single -ftz 2" },{ "fast_lib_author": "Piers Titus van der Torren (pierstitus@toverlamp.org)" },{ "fast_lib_licence": "Apache-2.0" },{ "fast_lib_name": "Faust Fast Approximations Library" },{ "filename": "synth.dsp" },{ "filters_lib_lowpass0_highpass1": "Copyright (C) 2003-2019 by Julius O. Smith III <jos@ccrma.stanford.edu>" },{ "filters_lib_name": "Faust Filters Library" },{ "filters_lib_svf_author": "Oleg Nesterov" },{ "filters_lib_svf_copyright": "Copyright (C) 2020 Oleg Nesterov <oleg@redhat.com>" },{ "filters_lib_svf_license": "MIT-style STK-4.3 license" },{ "filters_lib_version": "0.3" },{ "library_path0": "/libraries/stdfaust.lib" },{ "library_path1": "/project/fast.lib" },{ "library_path2": "/libraries/maths.lib" },{ "library_path3": "/libraries/platform.lib" },{ "library_path4": "/libraries/filters.lib" },{ "library_path5": "/libraries/signals.lib" },{ "library_path6": "/libraries/routes.lib" },{ "maths_lib_author": "GRAME" },{ "maths_lib_copyright": "GRAME" },{ "maths_lib_license": "LGPL with exception" },{ "maths_lib_name": "Faust Math Library" },{ "maths_lib_version": "2.5" },{ "name": "synth" },{ "platform_lib_name": "Generic Platform Library" },{ "platform_lib_version": "0.2" },{ "routes_lib_name": "Faust Signal Routing Library" },{ "routes_lib_version": "0.2" },{ "signals_lib_name": "Faust Signal Routing Library" },{ "signals_lib_version": "0.1" }],"ui": [ {"type": "hgroup","label": "strisy","items": [ {"type": "vgroup","label": "config","meta": [{ "0": "" }],"items": [ {"type": "hslider","label": "accDecay","shortname": "accDecay","address": "/strisy/config/accDecay","index": 16500,"meta": [{ "style": "knob" }],"init": 0.1,"min": 0,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "config2","meta": [{ "1": "" }],"items": [ {"type": "hslider","label": "filt2Freq","shortname": "filt2Freq","address": "/strisy/config2/filt2Freq","index": 16608,"meta": [{ "style": "knob" }],"init": 3000,"min": 0,"max": 10000,"step": 1},{"type": "hslider","label": "filt2Level","shortname": "filt2Level","address": "/strisy/config2/filt2Level","index": 16604,"meta": [{ "style": "knob" }],"init": 0.8,"min": 0,"max": 50,"step": 0.01},{"type": "hslider","label": "filt2Q","shortname": "filt2Q","address": "/strisy/config2/filt2Q","index": 16612,"meta": [{ "style": "knob" }],"init": 2,"min": 0.01,"max": 10,"step": 0.01},{"type": "hslider","label": "filtFF","shortname": "filtFF","address": "/strisy/config2/filtFF","index": 16460,"meta": [{ "style": "knob" }],"init": 1,"min": 0,"max": 16,"step": 0.01},{"type": "hslider","label": "filtQ","shortname": "filtQ","address": "/strisy/config2/filtQ","index": 16584,"meta": [{ "style": "knob" }],"init": 1,"min": 0,"max": 10,"step": 0.01},{"type": "hslider","label": "minFreq","shortname": "minFreq","address": "/strisy/config2/minFreq","index": 16456,"meta": [{ "style": "knob" }],"init": 200,"min": 0,"max": 1000,"step": 1}]},{"type": "vgroup","label": "config3","meta": [{ "2": "" }],"items": [ {"type": "hslider","label": "bfQ1","shortname": "bfQ1","address": "/strisy/config3/bfQ1","index": 16640,"meta": [{ "style": "knob" }],"init": 5,"min": 0.3,"max": 20,"step": 0.01},{"type": "hslider","label": "bfQ2","shortname": "bfQ2","address": "/strisy/config3/bfQ2","index": 16668,"meta": [{ "style": "knob" }],"init": 8,"min": 0.3,"max": 20,"step": 0.01},{"type": "hslider","label": "bfQ3","shortname": "bfQ3","address": "/strisy/config3/bfQ3","index": 16696,"meta": [{ "style": "knob" }],"init": 8,"min": 0.3,"max": 20,"step": 0.01},{"type": "hslider","label": "bflevel","shortname": "bflevel","address": "/strisy/config3/bflevel","index": 16632,"meta": [{ "style": "knob" }],"init": 6,"min": 0.1,"max": 20,"step": 0.01}]},{"type": "vgroup","label": "accelerometer","items": [ {"type": "vslider","label": "acc_abs","shortname": "acc_abs","address": "/strisy/accelerometer/acc_abs","index": 16512,"meta": [{ "style": "knob" }],"init": 1,"min": 0,"max": 4,"step": 0.01}]},{"type": "vgroup","label": "gyroscope","items": [ {"type": "vslider","label": "rot_x","shortname": "rot_x","address": "/strisy/gyroscope/rot_x","index": 16664,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "rot_y","shortname": "rot_y","address": "/strisy/gyroscope/rot_y","index": 16636,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "rot_z","shortname": "rot_z","address": "/strisy/gyroscope/rot_z","index": 16692,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v0","items": [ {"type": "vslider","label": "note","shortname": "v0_note","address": "/strisy/v0/note","index": 16404,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v0_pres","address": "/strisy/v0/pres","index": 16396,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v0_vpres","address": "/strisy/v0/vpres","index": 16416,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v0_but_y","address": "/strisy/v0/but_y","index": 16468,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v1","items": [ {"type": "vslider","label": "note","shortname": "v1_note","address": "/strisy/v1/note","index": 16724,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v1_pres","address": "/strisy/v1/pres","index": 16720,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v1_vpres","address": "/strisy/v1/vpres","index": 16736,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v1_but_y","address": "/strisy/v1/but_y","index": 16760,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v2","items": [ {"type": "vslider","label": "note","shortname": "v2_note","address": "/strisy/v2/note","index": 16856,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v2_pres","address": "/strisy/v2/pres","index": 16852,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v2_vpres","address": "/strisy/v2/vpres","index": 16868,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v2_but_y","address": "/strisy/v2/but_y","index": 16892,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v3","items": [ {"type": "vslider","label": "note","shortname": "v3_note","address": "/strisy/v3/note","index": 16988,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v3_pres","address": "/strisy/v3/pres","index": 16984,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v3_vpres","address": "/strisy/v3/vpres","index": 17000,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v3_but_y","address": "/strisy/v3/but_y","index": 17024,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v4","items": [ {"type": "vslider","label": "note","shortname": "v4_note","address": "/strisy/v4/note","index": 17120,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v4_pres","address": "/strisy/v4/pres","index": 17116,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v4_vpres","address": "/strisy/v4/vpres","index": 17132,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v4_but_y","address": "/strisy/v4/but_y","index": 17156,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]},{"type": "vgroup","label": "v5","items": [ {"type": "vslider","label": "note","shortname": "v5_note","address": "/strisy/v5/note","index": 17252,"meta": [{ "0": "" },{ "style": "knob" }],"init": 69,"min": 0,"max": 127,"step": 0.01},{"type": "vslider","label": "pres","shortname": "v5_pres","address": "/strisy/v5/pres","index": 17248,"meta": [{ "1": "" },{ "style": "knob" }],"init": 0,"min": 0,"max": 1,"step": 0.01},{"type": "vslider","label": "vpres","shortname": "v5_vpres","address": "/strisy/v5/vpres","index": 17264,"meta": [{ "2": "" },{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01},{"type": "vslider","label": "but_y","shortname": "v5_but_y","address": "/strisy/v5/but_y","index": 17288,"meta": [{ "style": "knob" }],"init": 0,"min": -1,"max": 1,"step": 0.01}]}]}]}';
}
function getBase64Codesynth() { return ""; }

/*
 faust2wasm: GRAME 2017-2019
*/

'use strict';

if (typeof (AudioWorkletNode) === "undefined") {
    alert("AudioWorklet is not supported in this browser !")
}

class synthNode extends AudioWorkletNode {

    constructor(context, baseURL, options) {
        super(context, 'synth', options);

        this.baseURL = baseURL;
        this.json = options.processorOptions.json;
        this.json_object = JSON.parse(this.json);

        // JSON parsing functions
        this.parse_ui = function (ui, obj) {
            for (var i = 0; i < ui.length; i++) {
                this.parse_group(ui[i], obj);
            }
        }

        this.parse_group = function (group, obj) {
            if (group.items) {
                this.parse_items(group.items, obj);
            }
        }

        this.parse_items = function (items, obj) {
            for (var i = 0; i < items.length; i++) {
                this.parse_item(items[i], obj);
            }
        }

        this.parse_item = function (item, obj) {
            if (item.type === "vgroup"
                || item.type === "hgroup"
                || item.type === "tgroup") {
                this.parse_items(item.items, obj);
            } else if (item.type === "hbargraph"
                || item.type === "vbargraph") {
                // Keep bargraph adresses
                obj.outputs_items.push(item.address);
            } else if (item.type === "vslider"
                || item.type === "hslider"
                || item.type === "button"
                || item.type === "checkbox"
                || item.type === "nentry") {
                // Keep inputs adresses
                obj.inputs_items.push(item.address);
                obj.descriptor.push(item);
                // Decode MIDI
                if (item.meta !== undefined) {
                    for (var i = 0; i < item.meta.length; i++) {
                        if (item.meta[i].midi !== undefined) {
                            if (item.meta[i].midi.trim() === "pitchwheel") {
                                obj.fPitchwheelLabel.push({
                                    path: item.address,
                                    min: parseFloat(item.min),
                                    max: parseFloat(item.max)
                                });
                            } else if (item.meta[i].midi.trim().split(" ")[0] === "ctrl") {
                                obj.fCtrlLabel[parseInt(item.meta[i].midi.trim().split(" ")[1])]
                                    .push({
                                        path: item.address,
                                        min: parseFloat(item.min),
                                        max: parseFloat(item.max)
                                    });
                            }
                        }
                    }
                }
                // Define setXXX/getXXX, replacing '/c' with 'C' everywhere in the string
                var set_name = "set" + item.address;
                var get_name = "get" + item.address;
                set_name = set_name.replace(/\/./g, (x) => { return x.substr(1, 1).toUpperCase(); });
                get_name = get_name.replace(/\/./g, (x) => { return x.substr(1, 1).toUpperCase(); });
                obj[set_name] = (val) => { obj.setParamValue(item.address, val); };
                obj[get_name] = () => { return obj.getParamValue(item.address); };
                //console.log(set_name);
                //console.log(get_name);
            }
        }

        this.output_handler = null;

        // input/output items
        this.inputs_items = [];
        this.outputs_items = [];
        this.descriptor = [];

        // MIDI
        this.fPitchwheelLabel = [];
        this.fCtrlLabel = new Array(128);
        for (var i = 0; i < this.fCtrlLabel.length; i++) { this.fCtrlLabel[i] = []; }

        // Parse UI
        this.parse_ui(this.json_object.ui, this);

        // Set message handler
        this.port.onmessage = this.handleMessage.bind(this);
        try {
            if (this.parameters) this.parameters.forEach(p => p.automationRate = "k-rate");
        } catch (e) { }
    }

    // To be called by the message port with messages coming from the processor
    handleMessage(event) {
        var msg = event.data;
        if (this.output_handler) {
            this.output_handler(msg.path, msg.value);
        }
    }

    // Public API

    /**
     * Destroy the node, deallocate resources.
     */
    destroy() {
        this.port.postMessage({ type: "destroy" });
        this.port.close();
    }

    /**
     *  Returns a full JSON description of the DSP.
     */
    getJSON() {
        return this.json;
    }

    // For WAP
    async getMetadata() {
        return new Promise(resolve => {
            let real_url = (this.baseURL === "") ? "main.json" : (this.baseURL + "/main.json");
            fetch(real_url).then(responseJSON => {
                return responseJSON.json();
            }).then(json => {
                resolve(json);
            })
        });
    }

    /**
     *  Set the control value at a given path.
     *
     * @param path - a path to the control
     * @param val - the value to be set
     */
    setParamValue(path, val) {
        // Needed for sample accurate control
        this.parameters.get(path).setValueAtTime(val, 0);
    }

    // For WAP
    setParam(path, val) {
        // Needed for sample accurate control
        this.parameters.get(path).setValueAtTime(val, 0);
    }

    /**
     *  Get the control value at a given path.
     *
     * @return the current control value
     */
    getParamValue(path) {
        return this.parameters.get(path).value;
    }

    // For WAP
    getParam(path) {
        return this.parameters.get(path).value;
    }

    /**
     * Setup a control output handler with a function of type (path, value)
     * to be used on each generated output value. This handler will be called
     * each audio cycle at the end of the 'compute' method.
     *
     * @param handler - a function of type function(path, value)
     */
    setOutputParamHandler(handler) {
        this.output_handler = handler;
    }

    /**
     * Get the current output handler.
     */
    getOutputParamHandler() {
        return this.output_handler;
    }

    getNumInputs() {
        return parseInt(this.json_object.inputs);
    }

    getNumOutputs() {
        return parseInt(this.json_object.outputs);
    }

    // For WAP
    inputChannelCount() {
        return parseInt(this.json_object.inputs);
    }

    outputChannelCount() {
        return parseInt(this.json_object.outputs);
    }

    /**
     * Returns an array of all input paths (to be used with setParamValue/getParamValue)
     */
    getParams() {
        return this.inputs_items;
    }

    // For WAP
    getDescriptor() {
        var desc = {};
        for (const item in this.descriptor) {
            if (this.descriptor.hasOwnProperty(item)) {
                if (this.descriptor[item].label != "bypass") {
                    desc = Object.assign({ [this.descriptor[item].label]: { minValue: this.descriptor[item].min, maxValue: this.descriptor[item].max, defaultValue: this.descriptor[item].init } }, desc);
                }
            }
        }
        return desc;
    }

    /**
     * Control change
     *
     * @param channel - the MIDI channel (0..15, not used for now)
     * @param ctrl - the MIDI controller number (0..127)
     * @param value - the MIDI controller value (0..127)
     */
    ctrlChange(channel, ctrl, value) {
        if (this.fCtrlLabel[ctrl] !== []) {
            for (var i = 0; i < this.fCtrlLabel[ctrl].length; i++) {
                var path = this.fCtrlLabel[ctrl][i].path;
                this.setParamValue(path, synthNode.remap(value, 0, 127, this.fCtrlLabel[ctrl][i].min, this.fCtrlLabel[ctrl][i].max));
                if (this.output_handler) {
                    this.output_handler(path, this.getParamValue(path));
                }
            }
        }
    }

    /**
     * PitchWeel
     *
     * @param channel - the MIDI channel (0..15, not used for now)
     * @param value - the MIDI controller value (0..16383)
     */
    pitchWheel(channel, wheel) {
        for (var i = 0; i < this.fPitchwheelLabel.length; i++) {
            var pw = this.fPitchwheelLabel[i];
            this.setParamValue(pw.path, synthNode.remap(wheel, 0, 16383, pw.min, pw.max));
            if (this.output_handler) {
                this.output_handler(pw.path, this.getParamValue(pw.path));
            }
        }
    }

    /**
     * Generic MIDI message handler.
     */
    midiMessage(data) {
        var cmd = data[0] >> 4;
        var channel = data[0] & 0xf;
        var data1 = data[1];
        var data2 = data[2];

        if (channel === 9) {
            return;
        } else if (cmd === 11) {
            this.ctrlChange(channel, data1, data2);
        } else if (cmd === 14) {
            this.pitchWheel(channel, (data2 * 128.0 + data1));
        }
    }

    // For WAP
    onMidi(data) {
        midiMessage(data);
    }

    /**
     * @returns {Object} describes the path for each available param and its current value
     */
    async getState() {
        var params = new Object();
        for (let i = 0; i < this.getParams().length; i++) {
            Object.assign(params, { [this.getParams()[i]]: `${this.getParam(this.getParams()[i])}` });
        }
        return new Promise(resolve => { resolve(params) });
    }

    /**
     * Sets each params with the value indicated in the state object
     * @param {Object} state 
     */
    async setState(state) {
        return new Promise(resolve => {
            for (const param in state) {
                if (state.hasOwnProperty(param)) this.setParam(param, state[param]);
            }
            try {
                this.gui.setAttribute('state', JSON.stringify(state));
            } catch (error) {
                console.warn("Plugin without gui or GUI not defined", error);
            }
            resolve(state);
        })
    }

    /**
     * A different call closer to the preset management
     * @param {Object} patch to assign as a preset to the node
     */
    setPatch(patch) {
        this.setState(this.presets[patch])
    }

    static remap(v, mn0, mx0, mn1, mx1) {
        return (1.0 * (v - mn0) / (mx0 - mn0)) * (mx1 - mn1) + mn1;
    }

}

// Factory class
class synth {

    static fWorkletProcessors;

    /**
     * Factory constructor.
     *
     * @param context - the audio context
     * @param baseURL - the baseURL of the plugin folder
     */
    constructor(context, baseURL = "") {
        console.log("baseLatency " + context.baseLatency);
        console.log("outputLatency " + context.outputLatency);
        console.log("sampleRate " + context.sampleRate);

        this.context = context;
        this.baseURL = baseURL;
        this.pathTable = [];

        this.fWorkletProcessors = this.fWorkletProcessors || [];
    }

    heap2Str(buf) {
        let str = "";
        let i = 0;
        while (buf[i] !== 0) {
            str += String.fromCharCode(buf[i++]);
        }
        return str;
    }

    /**
     * Load additionnal resources to prepare the custom AudioWorkletNode. Returns a promise to be used with the created node.
     */
    async load() {
        try {
            const importObject = {
                env: {
                    memoryBase: 0,
                    tableBase: 0,
                    _abs: Math.abs,

                    // Float version
                    _acosf: Math.acos,
                    _asinf: Math.asin,
                    _atanf: Math.atan,
                    _atan2f: Math.atan2,
                    _ceilf: Math.ceil,
                    _cosf: Math.cos,
                    _expf: Math.exp,
                    _floorf: Math.floor,
                    _fmodf: (x, y) => x % y,
                    _logf: Math.log,
                    _log10f: Math.log10,
                    _max_f: Math.max,
                    _min_f: Math.min,
                    _remainderf: (x, y) => x - Math.round(x / y) * y,
                    _powf: Math.pow,
                    _roundf: Math.fround,
                    _sinf: Math.sin,
                    _sqrtf: Math.sqrt,
                    _tanf: Math.tan,
                    _acoshf: Math.acosh,
                    _asinhf: Math.asinh,
                    _atanhf: Math.atanh,
                    _coshf: Math.cosh,
                    _sinhf: Math.sinh,
                    _tanhf: Math.tanh,
                    _isnanf: Number.isNaN,
                    _isinff: function (x) { return !isFinite(x); },
                    _copysignf: function (x, y) { return Math.sign(x) === Math.sign(y) ? x : -x; },

                    // Double version
                    _acos: Math.acos,
                    _asin: Math.asin,
                    _atan: Math.atan,
                    _atan2: Math.atan2,
                    _ceil: Math.ceil,
                    _cos: Math.cos,
                    _exp: Math.exp,
                    _floor: Math.floor,
                    _fmod: (x, y) => x % y,
                    _log: Math.log,
                    _log10: Math.log10,
                    _max_: Math.max,
                    _min_: Math.min,
                    _remainder: (x, y) => x - Math.round(x / y) * y,
                    _pow: Math.pow,
                    _round: Math.fround,
                    _sin: Math.sin,
                    _sqrt: Math.sqrt,
                    _tan: Math.tan,
                    _acosh: Math.acosh,
                    _asinh: Math.asinh,
                    _atanh: Math.atanh,
                    _cosh: Math.cosh,
                    _sinh: Math.sinh,
                    _tanh: Math.tanh,
                    _isnan: Number.isNaN,
                    _isinf: function (x) { return !isFinite(x); },
                    _copysign: function (x, y) { return Math.sign(x) === Math.sign(y) ? x : -x; },

                    table: new WebAssembly.Table({ initial: 0, element: "anyfunc" })
                }
            };

            let real_url = (this.baseURL === "") ? "synth.wasm" : (this.baseURL + "/synth.wasm");
            const dspFile = await fetch(real_url);
            const dspBuffer = await dspFile.arrayBuffer();
            const dspModule = await WebAssembly.compile(dspBuffer);
            const dspInstance = await WebAssembly.instantiate(dspModule, importObject);

            let HEAPU8 = new Uint8Array(dspInstance.exports.memory.buffer);
            let json = this.heap2Str(HEAPU8);
            let json_object = JSON.parse(json);
            let options = { wasm_module: dspModule, json: json };

            if (this.fWorkletProcessors.indexOf(name) === -1) {
                try {
                    let re = /JSON_STR/g;
                    let synthProcessorString1 = synthProcessorString.replace(re, json);
                    let real_url = window.URL.createObjectURL(new Blob([synthProcessorString1], { type: 'text/javascript' }));
                    await this.context.audioWorklet.addModule(real_url);
                    // Keep the DSP name
                    console.log("Keep the DSP name");
                    this.fWorkletProcessors.push(name);
                } catch (e) {
                    console.error(e);
                    console.error("Faust " + this.name + " cannot be loaded or compiled");
                    return null;
                }
            }
            this.node = new synthNode(this.context, this.baseURL,
                {
                    numberOfInputs: (parseInt(json_object.inputs) > 0) ? 1 : 0,
                    numberOfOutputs: (parseInt(json_object.outputs) > 0) ? 1 : 0,
                    channelCount: Math.max(1, parseInt(json_object.inputs)),
                    outputChannelCount: [parseInt(json_object.outputs)],
                    channelCountMode: "explicit",
                    channelInterpretation: "speakers",
                    processorOptions: options
                });
            this.node.onprocessorerror = () => { console.log('An error from synth-processor was detected.'); }
            return (this.node);
        } catch (e) {
            console.error(e);
            console.error("Faust " + this.name + " cannot be loaded or compiled");
            return null;
        }
    }

    async loadGui() {
        return new Promise((resolve, reject) => {
            try {
                // DO THIS ONLY ONCE. If another instance has already been added, do not add the html file again
                let real_url = (this.baseURL === "") ? "main.html" : (this.baseURL + "/main.html");
                if (!this.linkExists(real_url)) {
                    // LINK DOES NOT EXIST, let's add it to the document
                    var link = document.createElement('link');
                    link.rel = 'import';
                    link.href = real_url;
                    document.head.appendChild(link);
                    link.onload = (e) => {
                        // the file has been loaded, instanciate GUI
                        // and get back the HTML elem
                        // HERE WE COULD REMOVE THE HARD CODED NAME
                        var element = createsynthGUI(this.node);
                        resolve(element);
                    }
                } else {
                    // LINK EXIST, WE AT LEAST CREATED ONE INSTANCE PREVIOUSLY
                    // so we can create another instance
                    var element = createsynthGUI(this.node);
                    resolve(element);
                }
            } catch (e) {
                console.log(e);
                reject(e);
            }
        });
    };

    linkExists(url) {
        return document.querySelectorAll(`link[href="${url}"]`).length > 0;
    }
}

// Template string for AudioWorkletProcessor

let synthProcessorString = `

    'use strict';

    // Monophonic Faust DSP
    class synthProcessor extends AudioWorkletProcessor {
        
        // JSON parsing functions
        static parse_ui(ui, obj, callback)
        {
            for (var i = 0; i < ui.length; i++) {
                synthProcessor.parse_group(ui[i], obj, callback);
            }
        }
        
        static parse_group(group, obj, callback)
        {
            if (group.items) {
                synthProcessor.parse_items(group.items, obj, callback);
            }
        }
        
        static parse_items(items, obj, callback)
        {
            for (var i = 0; i < items.length; i++) {
                callback(items[i], obj, callback);
            }
        }
        
        static parse_item1(item, obj, callback)
        {
            if (item.type === "vgroup"
                || item.type === "hgroup"
                || item.type === "tgroup") {
                synthProcessor.parse_items(item.items, obj, callback);
            } else if (item.type === "hbargraph"
                       || item.type === "vbargraph") {
                // Nothing
            } else if (item.type === "vslider"
                       || item.type === "hslider"
                       || item.type === "button"
                       || item.type === "checkbox"
                       || item.type === "nentry") {
                obj.push({ name: item.address,
                         defaultValue: item.init,
                         minValue: item.min,
                         maxValue: item.max });
            }
        }
        
        static parse_item2(item, obj, callback)
        {
            if (item.type === "vgroup"
                || item.type === "hgroup"
                || item.type === "tgroup") {
                synthProcessor.parse_items(item.items, obj, callback);
            } else if (item.type === "hbargraph"
                       || item.type === "vbargraph") {
                // Keep bargraph adresses
                obj.outputs_items.push(item.address);
                obj.pathTable[item.address] = parseInt(item.index);
            } else if (item.type === "vslider"
                       || item.type === "hslider"
                       || item.type === "button"
                       || item.type === "checkbox"
                       || item.type === "nentry") {
                // Keep inputs adresses
                obj.inputs_items.push(item.address);
                obj.pathTable[item.address] = parseInt(item.index);
            }
        }
     
        static get parameterDescriptors() 
        {
            // Analyse JSON to generate AudioParam parameters
            var params = [];
            synthProcessor.parse_ui(JSON.parse(\`JSON_STR\`).ui, params, synthProcessor.parse_item1);
            return params;
        }
       
        constructor(options)
        {
            super(options);
            this.running = true;
            
            const importObject = {
                    env: {
                        memoryBase: 0,
                        tableBase: 0,

                        // Integer version
                        _abs: Math.abs,

                        // Float version
                        _acosf: Math.acos,
                        _asinf: Math.asin,
                        _atanf: Math.atan,
                        _atan2f: Math.atan2,
                        _ceilf: Math.ceil,
                        _cosf: Math.cos,
                        _expf: Math.exp,
                        _floorf: Math.floor,
                        _fmodf: function(x, y) { return x % y; },
                        _logf: Math.log,
                        _log10f: Math.log10,
                        _max_f: Math.max,
                        _min_f: Math.min,
                        _remainderf: function(x, y) { return x - Math.round(x/y) * y; },
                        _powf: Math.pow,
                        _roundf: Math.fround,
                        _sinf: Math.sin,
                        _sqrtf: Math.sqrt,
                        _tanf: Math.tan,
                        _acoshf: Math.acosh,
                        _asinhf: Math.asinh,
                        _atanhf: Math.atanh,
                        _coshf: Math.cosh,
                        _sinhf: Math.sinh,
                        _tanhf: Math.tanh,

                        // Double version
                        _acos: Math.acos,
                        _asin: Math.asin,
                        _atan: Math.atan,
                        _atan2: Math.atan2,
                        _ceil: Math.ceil,
                        _cos: Math.cos,
                        _exp: Math.exp,
                        _floor: Math.floor,
                        _fmod: function(x, y) { return x % y; },
                        _log: Math.log,
                        _log10: Math.log10,
                        _max_: Math.max,
                        _min_: Math.min,
                        _remainder:function(x, y) { return x - Math.round(x/y) * y; },
                        _pow: Math.pow,
                        _round: Math.fround,
                        _sin: Math.sin,
                        _sqrt: Math.sqrt,
                        _tan: Math.tan,
                        _acosh: Math.acosh,
                        _asinh: Math.asinh,
                        _atanh: Math.atanh,
                        _cosh: Math.cosh,
                        _sinh: Math.sinh,
                        _tanh: Math.tanh,

                        table: new WebAssembly.Table({ initial: 0, element: 'anyfunc' })
                    }
            };
            
            this.synth_instance = new WebAssembly.Instance(options.processorOptions.wasm_module, importObject);
            this.json_object = JSON.parse(options.processorOptions.json);
         
            this.output_handler = function(path, value) { this.port.postMessage({ path: path, value: value }); };
            
            this.ins = null;
            this.outs = null;

            this.dspInChannnels = [];
            this.dspOutChannnels = [];

            this.numIn = parseInt(this.json_object.inputs);
            this.numOut = parseInt(this.json_object.outputs);

            // Memory allocator
            this.ptr_size = 4;
            this.sample_size = 4;
            this.integer_size = 4;
            
            this.factory = this.synth_instance.exports;
            this.HEAP = this.synth_instance.exports.memory.buffer;
            this.HEAP32 = new Int32Array(this.HEAP);
            this.HEAPF32 = new Float32Array(this.HEAP);

            // Warning: keeps a ref on HEAP in Chrome and prevent proper GC
            //console.log(this.HEAP);
            //console.log(this.HEAP32);
            //console.log(this.HEAPF32);

            // bargraph
            this.outputs_timer = 5;
            this.outputs_items = [];

            // input items
            this.inputs_items = [];
        
            // Start of HEAP index

            // DSP is placed first with index 0. Audio buffer start at the end of DSP.
            this.audio_heap_ptr = parseInt(this.json_object.size);

            // Setup pointers offset
            this.audio_heap_ptr_inputs = this.audio_heap_ptr;
            this.audio_heap_ptr_outputs = this.audio_heap_ptr_inputs + (this.numIn * this.ptr_size);

            // Setup buffer offset
            this.audio_heap_inputs = this.audio_heap_ptr_outputs + (this.numOut * this.ptr_size);
            this.audio_heap_outputs = this.audio_heap_inputs + (this.numIn * NUM_FRAMES * this.sample_size);
            
            // Start of DSP memory : DSP is placed first with index 0
            this.dsp = 0;

            this.pathTable = [];
         
            // Send output values to the AudioNode
            this.update_outputs = function ()
            {
                if (this.outputs_items.length > 0 && this.output_handler && this.outputs_timer-- === 0) {
                    this.outputs_timer = 5;
                    for (var i = 0; i < this.outputs_items.length; i++) {
                        this.output_handler(this.outputs_items[i], this.HEAPF32[this.pathTable[this.outputs_items[i]] >> 2]);
                    }
                }
            }
            
            this.initAux = function ()
            {
                var i;
                
                if (this.numIn > 0) {
                    this.ins = this.audio_heap_ptr_inputs;
                    for (i = 0; i < this.numIn; i++) {
                        this.HEAP32[(this.ins >> 2) + i] = this.audio_heap_inputs + ((NUM_FRAMES * this.sample_size) * i);
                    }
                    
                    // Prepare Ins buffer tables
                    var dspInChans = this.HEAP32.subarray(this.ins >> 2, (this.ins + this.numIn * this.ptr_size) >> 2);
                    for (i = 0; i < this.numIn; i++) {
                        this.dspInChannnels[i] = this.HEAPF32.subarray(dspInChans[i] >> 2, (dspInChans[i] + NUM_FRAMES * this.sample_size) >> 2);
                    }
                }
                
                if (this.numOut > 0) {
                    this.outs = this.audio_heap_ptr_outputs;
                    for (i = 0; i < this.numOut; i++) {
                        this.HEAP32[(this.outs >> 2) + i] = this.audio_heap_outputs + ((NUM_FRAMES * this.sample_size) * i);
                    }
                    
                    // Prepare Out buffer tables
                    var dspOutChans = this.HEAP32.subarray(this.outs >> 2, (this.outs + this.numOut * this.ptr_size) >> 2);
                    for (i = 0; i < this.numOut; i++) {
                        this.dspOutChannnels[i] = this.HEAPF32.subarray(dspOutChans[i] >> 2, (dspOutChans[i] + NUM_FRAMES * this.sample_size) >> 2);
                    }
                }
                
                // Parse UI
                synthProcessor.parse_ui(this.json_object.ui, this, synthProcessor.parse_item2);
                
                // Init DSP
                this.factory.init(this.dsp, sampleRate); // 'sampleRate' is defined in AudioWorkletGlobalScope  
            }

            this.setParamValue = function (path, val)
            {
                this.HEAPF32[this.pathTable[path] >> 2] = val;
            }

            this.getParamValue = function (path)
            {
                return this.HEAPF32[this.pathTable[path] >> 2];
            }

            // Init resulting DSP
            this.initAux();
        }
        
        process(inputs, outputs, parameters) 
        {
            var input = inputs[0];
            var output = outputs[0];
            
            // Check inputs
            if (this.numIn > 0 && (!input || !input[0] || input[0].length === 0)) {
                //console.log("Process input error");
                return true;
            }
            // Check outputs
            if (this.numOut > 0 && (!output || !output[0] || output[0].length === 0)) {
                //console.log("Process output error");
                return true;
            }
            
            // Copy inputs
            if (input !== undefined) {
                for (var chan = 0; chan < Math.min(this.numIn, input.length); ++chan) {
                    var dspInput = this.dspInChannnels[chan];
                    dspInput.set(input[chan]);
                }
            }
            
            /*
            TODO: sample accurate control change is not yet handled
            When no automation occurs, params[i][1] has a length of 1,
            otherwise params[i][1] has a length of NUM_FRAMES with possible control change each sample
            */
            
            // Update controls
            for (const path in parameters) {
                const paramArray = parameters[path];
                this.setParamValue(path, paramArray[0]);
            }
        
          	// Compute
            try {
                this.factory.compute(this.dsp, NUM_FRAMES, this.ins, this.outs);
            } catch(e) {
                console.log("ERROR in compute (" + e + ")");
            }
            
            // Update bargraph
            this.update_outputs();
            
            // Copy outputs
            if (output !== undefined) {
                for (var chan = 0; chan < Math.min(this.numOut, output.length); ++chan) {
                    var dspOutput = this.dspOutChannnels[chan];
                    output[chan].set(dspOutput);
                }
            }
            
            return this.running;
    	}
        
        handleMessage(event)
        {
            var msg = event.data;
            switch (msg.type) {
                case "destroy": this.running = false; break;
            }
        }
    }

    // Globals
    const NUM_FRAMES = 128;
    try {
        registerProcessor('synth', synthProcessor);
    } catch (error) {
        console.warn(error);
    }
`;

const dspName = "synth";

// WAP factory or npm package module
if (typeof module === "undefined") {
    window.synth = synth;
    window.Faustsynth = synth;
    window[dspName] = synth;
} else {
    module.exports = { synth };
}
